(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{445:function(a,v,t){"use strict";t.r(v);var e=t(20),_=Object(e.a)({},(function(){var a=this,v=a.$createElement,t=a._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("div",{staticClass:"center-container"},[t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://i.loli.net/2020/10/16/sxZzwkga4dYRFQX.png",loading:"lazy"}})])]),t("p",[a._v("图中展示了8种作用于不同分代的收集器，"),t("strong",[a._v("如果两个收集器之间存在连线，则说明它们可以搭配使用")]),a._v("。虚拟机所处的区域则表示它是属于新生代还是老年代收集器。")]),a._v(" "),t("p",[a._v("新生代收集器：Serial、ParNew、Parallel Scavenge")]),a._v(" "),t("p",[a._v("老年代收集器：CMS、Serial Old、Parallel Old")]),a._v(" "),t("p",[a._v("整堆收集器： G1、ZGC")]),a._v(" "),t("h2",{attrs:{id:"相关概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[a._v("#")]),a._v(" 相关概念")]),a._v(" "),t("ul",[t("li",[a._v("并行收集：指多条垃圾收集线程并行工作，但此时用户线程仍处于等待状态。")]),a._v(" "),t("li",[a._v("并发收集：指用户线程与垃圾收集线程同时工作（不一定是并行的可能会交替执行）。用户程序在继续运行，而垃圾收集程序运行在另一个CPU上。")]),a._v(" "),t("li",[a._v("吞吐量：即CPU用于运行用户代码的时间与CPU总消耗时间的比值（吞吐量 = 运行用户代码时间 / ( 运行用户代码时间 + 垃圾收集时间 )）。例如：虚拟机共运行100分钟，垃圾收集器花掉1分钟，那么吞吐量就是99%")])]),a._v(" "),t("h2",{attrs:{id:"serial-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serial-收集器"}},[a._v("#")]),a._v(" Serial 收集器")]),a._v(" "),t("p",[a._v("Serial收集器是最基本的、发展历史最悠久的收集器，在1.3之前是新生代唯一的选择。")]),a._v(" "),t("p",[t("strong",[a._v("特点：单线程、简单高效（与其他收集器的单线程相比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程手机效率。收集器进行垃圾回收时，必须暂停其他所有的工作线程，直到它结束（Stop The World）")]),a._v("。")]),a._v(" "),t("p",[t("strong",[a._v("应用场景")]),a._v("：适用于Client模式下的虚拟机。")]),a._v(" "),t("p",[t("strong",[a._v("Serial / Serial Old收集器运行示意图")])]),a._v(" "),t("div",{staticClass:"center-container"},[t("p",[t("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://i.loli.net/2020/10/16/EqGA1mykLza6HND.png",loading:"lazy"}})])]),t("h2",{attrs:{id:"parnew收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parnew收集器"}},[a._v("#")]),a._v(" ParNew收集器")]),a._v(" "),t("p",[a._v("ParNew收集器其实就是Serial收集器的多线程版本。")]),a._v(" "),t("p",[a._v("除了使用多线程外其余行为均和Serial收集器一模一样（参数控制、收集算法、Stop The World、对象分配规则、回收策略等）。")]),a._v(" "),t("p",[t("strong",[a._v("特点：多线程、ParNew收集器默认开启的收集线程数与CPU的数量相同，在CPU非常多的环境中，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数")]),a._v("。和Serial收集器一样存在Stop The World问题")]),a._v(" "),t("p",[t("strong",[a._v("应用场景")]),a._v("：ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器，因为它是除了Serial收集器外，唯一一个能与CMS收集器配合工作的。")]),a._v(" "),t("p",[t("strong",[a._v("ParNew/Serial Old组合收集器运行示意图如下：")])]),a._v(" "),t("div",{staticClass:"center-container"},[t("p",[t("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://i.loli.net/2020/10/16/OTgcLBEbSrYozsD.png",loading:"lazy"}})])]),t("h2",{attrs:{id:"parallel-scavenge-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallel-scavenge-收集器"}},[a._v("#")]),a._v(" Parallel Scavenge 收集器")]),a._v(" "),t("p",[a._v("与吞吐量关系密切，故也称为吞吐量优先收集器。")]),a._v(" "),t("p",[t("strong",[a._v("特点：属于新生代收集器也是采用复制算法的收集器，又是并行的多线程收集器（与ParNew收集器类似）")]),a._v("。")]),a._v(" "),t("p",[a._v("该收集器的目标是达到一个可控制的吞吐量。还有一个值得关注的点是：GC自适应调节策略（与ParNew收集器最重要的一个区别）")]),a._v(" "),t("p",[t("strong",[a._v("GC自适应调节策略")]),a._v("：Parallel Scavenge收集器可设置-XX:+UseAdptiveSizePolicy参数。当开关打开时不需要手动指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX:SurvivorRation）、晋升老年代的对象年龄（-XX:PretenureSizeThreshold）等，虚拟机会根据系统的运行状况收集性能监控信息，动态设置这些参数以提供最优的停顿时间和最高的吞吐量，这种调节方式称为GC的自适应调节策略。")]),a._v(" "),t("p",[a._v("Parallel Scavenge收集器使用两个参数控制吞吐量：")]),a._v(" "),t("ul",[t("li",[a._v("XX:MaxGCPauseMillis 控制最大的垃圾收集停顿时间")]),a._v(" "),t("li",[a._v("XX:GCRatio 直接设置吞吐量的大小。")])]),a._v(" "),t("h2",{attrs:{id:"serial-old-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serial-old-收集器"}},[a._v("#")]),a._v(" Serial Old 收集器")]),a._v(" "),t("p",[a._v("Serial Old是Serial收集器的老年代版本。")]),a._v(" "),t("p",[t("strong",[a._v("特点")]),a._v("："),t("strong",[a._v("同样是单线程收集器，采用标记-整理算法")]),a._v("。")]),a._v(" "),t("p",[t("strong",[a._v("应用场景")]),a._v("：主要也是使用在Client模式下的虚拟机中。也可在Server模式下使用。Server模式下主要的两大用途（在后续中详细讲解···）：")]),a._v(" "),t("ol",[t("li",[a._v("在JDK1.5以及以前的版本中与Parallel Scavenge收集器搭配使用。")]),a._v(" "),t("li",[a._v("作为CMS收集器的后备方案，在并发收集Concurent Mode Failure时使用。")])]),a._v(" "),t("p",[a._v("Serial / Serial Old收集器工作过程图（Serial收集器图示相同）：")]),a._v(" "),t("div",{staticClass:"center-container"},[t("p",[t("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://i.loli.net/2020/10/16/EqGA1mykLza6HND.png",loading:"lazy"}})])]),t("h2",{attrs:{id:"parallel-old-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallel-old-收集器"}},[a._v("#")]),a._v(" Parallel Old 收集器")]),a._v(" "),t("p",[a._v("是Parallel Scavenge收集器的老年代版本。")]),a._v(" "),t("p",[t("strong",[a._v("特点")]),a._v("："),t("strong",[a._v("多线程，采用标记-整理算法")]),a._v("。")]),a._v(" "),t("p",[t("strong",[a._v("应用场景")]),a._v("：注重高吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge+Parallel Old 收集器。")]),a._v(" "),t("p",[t("strong",[a._v("Parallel Scavenge/Parallel Old收集器工作过程图：")])]),a._v(" "),t("div",{staticClass:"center-container"},[t("p",[t("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://i.loli.net/2020/10/16/zP7XShoji4xA8FM.png",loading:"lazy"}})])]),t("h2",{attrs:{id:"cms收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cms收集器"}},[a._v("#")]),a._v(" CMS收集器")]),a._v(" "),t("p",[a._v("一种以获取最短回收停顿时间为目标的收集器。")]),a._v(" "),t("p",[t("strong",[a._v("特点")]),a._v("："),t("strong",[a._v("基于标记-清除算法实现。并发收集、低停顿")]),a._v("。")]),a._v(" "),t("p",[t("strong",[a._v("应用场景")]),a._v("：适用于注重服务的响应速度，希望系统停顿时间最短，给用户带来更好的体验等场景下。如web程序、b/s服务。")]),a._v(" "),t("p",[t("strong",[a._v("CMS收集器的运行过程分为下列4步：")])]),a._v(" "),t("p",[t("strong",[a._v("初始标记")]),a._v("：标记GC Roots能直接到的对象。速度很快但是仍存在Stop The World问题。")]),a._v(" "),t("p",[t("strong",[a._v("并发标记")]),a._v("：进行GC Roots Tracing 的过程，找出存活对象且用户线程可并发执行。")]),a._v(" "),t("p",[t("strong",[a._v("重新标记")]),a._v("：为了修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录。仍然存在Stop The World问题。")]),a._v(" "),t("p",[t("strong",[a._v("并发清除")]),a._v("：对标记的对象进行清除回收。")]),a._v(" "),t("p",[a._v("CMS收集器的内存回收过程是与用户线程一起并发执行的。")]),a._v(" "),t("p",[a._v("CMS收集器的工作过程图：")]),a._v(" "),t("div",{staticClass:"center-container"},[t("p",[t("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://i.loli.net/2020/10/16/cvumZPwIgC71Mi2.png",loading:"lazy"}})])]),t("p",[a._v("CMS收集器的缺点：")]),a._v(" "),t("ul",[t("li",[a._v("对CPU资源非常敏感。")]),a._v(" "),t("li",[a._v("无法处理浮动垃圾，可能出现Concurrent Model Failure失败而导致另一次Full GC的产生。")]),a._v(" "),t("li",[a._v("因为采用标记-清除算法所以会存在空间碎片的问题，导致大对象无法分配空间，不得不提前触发一次Full GC。")])]),a._v(" "),t("h2",{attrs:{id:"g1收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1收集器"}},[a._v("#")]),a._v(" G1收集器")]),a._v(" "),t("p",[a._v("一款面向服务端应用的垃圾收集器。")]),a._v(" "),t("p",[t("strong",[a._v("特点如下：")])]),a._v(" "),t("p",[t("strong",[a._v("并行与并发：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿时间。部分收集器原本需要停顿Java线程来执行GC动作，G1收集器仍然可以通过并发的方式让Java程序继续运行")]),a._v("。")]),a._v(" "),t("p",[t("strong",[a._v("分代收集：G1能够独自管理整个Java堆，并且采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果")]),a._v("。")]),a._v(" "),t("p",[t("strong",[a._v("空间整合：G1运作期间不会产生空间碎片，收集后能提供规整的可用内存")]),a._v("。")]),a._v(" "),t("p",[t("strong",[a._v("可预测的停顿：G1除了追求低停顿外，还能建立可预测的停顿时间模型。能让使用者明确指定在一个长度为M毫秒的时间段内，消耗在垃圾收集上的时间不得超过N毫秒")]),a._v("。")]),a._v(" "),t("p",[t("strong",[a._v("G1为什么能建立可预测的停顿时间模型？")])]),a._v(" "),t("p",[a._v("因为它有计划的避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的大小，在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。这样就保证了在有限的时间内可以获取尽可能高的收集效率。")]),a._v(" "),t("p",[t("strong",[a._v("G1与其他收集器的区别")]),a._v("：")]),a._v(" "),t("p",[a._v("其他收集器的工作范围是整个新生代或者老年代、G1收集器的工作范围是整个Java堆。在使用G1收集器时，它将整个Java堆划分为多个大小相等的独立区域（Region）。虽然也保留了新生代、老年代的概念，但新生代和老年代不再是相互隔离的，他们都是一部分Region（不需要连续）的集合。")]),a._v(" "),t("p",[t("strong",[a._v("G1收集器存在的问题：")])]),a._v(" "),t("p",[a._v("Region不可能是孤立的，分配在Region中的对象可以与Java堆中的任意对象发生引用关系。在采用可达性分析算法来判断对象是否存活时，得扫描整个Java堆才能保证准确性。其他收集器也存在这种问题（G1更加突出而已）。会导致Minor GC效率下降。")]),a._v(" "),t("p",[t("strong",[a._v("G1收集器是如何解决上述问题的？")])]),a._v(" "),t("p",[a._v("采用Remembered Set来避免整堆扫描。G1中每个Region都有一个与之对应的Remembered Set，虚拟机发现程序在对Reference类型进行写操作时，会产生一个Write Barrier暂时中断写操作，检查Reference引用对象是否处于多个Region中（即检查老年代中是否引用了新生代中的对象），如果是，便通过CardTable把相关引用信息记录到被引用对象所属的Region的Remembered Set中。当进行内存回收时，在GC根节点的枚举范围中加入Remembered Set即可保证不对全堆进行扫描也不会有遗漏。")]),a._v(" "),t("p",[t("strong",[a._v("如果不计算维护 Remembered Set 的操作，G1收集器大致可分为如下步骤：")])]),a._v(" "),t("p",[t("strong",[a._v("初始标记")]),a._v("：仅标记GC Roots能直接到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象。（需要线程停顿，但耗时很短。）")]),a._v(" "),t("p",[t("strong",[a._v("并发标记")]),a._v("：从GC Roots开始对堆中对象进行可达性分析，找出存活对象。（耗时较长，但可与用户程序并发执行）")]),a._v(" "),t("p",[t("strong",[a._v("最终标记")]),a._v("：为了修正在并发标记期间因用户程序执行而导致标记产生变化的那一部分标记记录。且对象的变化记录在线程Remembered Set Logs里面，把Remembered Set Logs里面的数据合并到Remembered Set中。（需要线程停顿，但可并行执行。）")]),a._v(" "),t("p",[t("strong",[a._v("筛选回收")]),a._v("：对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划。（可并发执行）")]),a._v(" "),t("p",[t("strong",[a._v("G1收集器运行示意图：")])]),a._v(" "),t("div",{staticClass:"center-container"},[t("p",[t("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://i.loli.net/2020/10/16/VF4KlWw5tUkai2A.png",loading:"lazy"}})])]),t("h2",{attrs:{id:"zgc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zgc"}},[a._v("#")]),a._v(" ZGC")]),a._v(" "),t("p",[a._v("ZGC（The Z Garbage Collector）是JDK 11中推出的一款低延迟垃圾回收器，它的设计目标包括：")]),a._v(" "),t("ul",[t("li",[a._v("停顿时间不超过10ms；")]),a._v(" "),t("li",[a._v("停顿时间不会随着堆的大小，或者活跃对象的大小而增加；")]),a._v(" "),t("li",[a._v("支持8MB~4TB级别的堆（未来支持16TB）。")])]),a._v(" "),t("h3",{attrs:{id:"特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[a._v("#")]),a._v(" 特性")]),a._v(" "),t("p",[a._v("1、ZGC只有短暂的STW，大部分的过程都是和应用线程并发执行，比如最耗时的并发标记和并发移动过程。")]),a._v(" "),t("p",[a._v("2、ZGC中没有新生代和老年代的概念，只有一块一块的内存区域page，以page单位进行对象的分配和回收。")]),a._v(" "),t("p",[a._v("3、每次进行GC时，都会对page进行压缩操作，所以完全避免了CMS算法中的碎片化问题。")]),a._v(" "),t("p",[a._v("4、现在多CPU插槽的服务器都是Numa架构，比如两颗CPU插槽(24核)，64G内存的服务器，那其中一颗CPU上的12个核，访问从属于它的32G本地内存，要比访问另外32G远端内存要快得多。")]),a._v(" "),t("p",[a._v("ZGC默认支持NUMA架构，在创建对象时，根据当前线程在哪个CPU执行，优先在靠近这个CPU的内存进行分配，这样可以显著的提高性能，在SPEC JBB 2005 基准测试里获得40%的提升。")]),a._v(" "),t("p",[a._v("5、和以往的标记算法比较不同，CMS和G1会在对象的对象头进行标记，而ZGC是标记对象的指针。")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://i.loli.net/2020/10/16/MqEKskNdZowCB4I.jpg",loading:"lazy"}})]),a._v(" "),t("p",[a._v("其中低42位对象的地址，42-45位用来做指标标记。")]),a._v(" "),t("p",[a._v("6、因为在标记和移动过程中，GC线程和应用线程是并发执行的，所以存在这种情况：对象A内部的引用所指的对象B在标记或者移动状态，为了保证应用线程拿到的B对象是对的，那么在读取B的指针时会经过一个 “load barriers” 读屏障，这个屏障可以保证在执行GC时，数据读取的正确性。")]),a._v(" "),t("h3",{attrs:{id:"zgc原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zgc原理"}},[a._v("#")]),a._v(" ZGC原理")]),a._v(" "),t("p",[a._v("与CMS中的ParNew和G1类似，ZGC也采用标记-复制算法，不过ZGC对该算法做了重大改进：ZGC在标记、转移和重定位阶段几乎都是并发的，这是ZGC实现停顿时间小于10ms目标的最关键原因。")]),a._v(" "),t("p",[a._v("ZGC垃圾回收周期如下图所示：")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://oscimg.oschina.net/oscnet/8e62c98c-2cff-4fce-9bc5-5a0d92ad04a9.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("ZGC只有三个STW阶段："),t("strong",[a._v("初始标记")]),a._v("，"),t("strong",[a._v("再标记")]),a._v("，"),t("strong",[a._v("初始转移")]),a._v("。其中，初始标记和初始转移分别都只需要扫描所有GC Roots，其处理时间和GC Roots的数量成正比，一般情况耗时非常短；再标记阶段STW时间很短，最多1ms，超过1ms则再次进入并发标记阶段。即，ZGC几乎所有暂停都只依赖于GC Roots集合大小，停顿时间不会随着堆的大小或者活跃对象的大小而增加。与ZGC对比，G1的转移阶段完全STW的，且停顿时间随存活对象的大小增加而增加。")]),a._v(" "),t("h3",{attrs:{id:"zgc的关键技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zgc的关键技术"}},[a._v("#")]),a._v(" ZGC的关键技术")]),a._v(" "),t("p",[a._v("ZGC通过着色指针和读屏障技术，解决了转移过程中准确访问对象的问题，实现了并发转移。大致原理描述如下：并发转移中“并发”意味着GC线程在转移对象的过程中，应用线程也在不停地访问对象。假设对象发生转移，但对象地址未及时更新，那么应用线程可能访问到旧地址，从而造成错误。而在ZGC中，应用线程访问对象将触发“读屏障”，如果发现对象被移动了，那么“读屏障”会把读出来的指针更新到对象的新地址上，这样应用线程始终访问的都是对象的新地址。那么，JVM是如何判断对象被移动过呢？就是利用对象引用的地址，即着色指针。下面介绍着色指针和读屏障技术细节")]),a._v(" "),t("p",[t("strong",[a._v("ZGC调优参数：")])]),a._v(" "),t("p",[t("strong",[a._v("-Xms -Xmx")]),a._v("：堆的最大内存和最小内存，这里都设置为10G，程序的堆内存将保持10G不变。")]),a._v(" "),t("p",[t("strong",[a._v("-XX:ReservedCodeCacheSize -XX:InitialCodeCacheSize")]),a._v(": 设置CodeCache的大小， JIT编译的代码都放在CodeCache中，一般服务64m或128m就已经足够。我们的服务因为有一定特殊性，所以设置的较大，后面会详细介绍。")]),a._v(" "),t("p",[t("strong",[a._v("-XX:+UnlockExperimentalVMOptions -XX:+UseZGC")]),a._v("：启用ZGC的配置。")]),a._v(" "),t("p",[t("strong",[a._v("-XX:ConcGCThreads")]),a._v("：并发回收垃圾的线程。默认是总核数的12.5%，8核CPU默认是1。调大后GC变快，但会占用程序运行时的CPU资源，吞吐会受到影响。")]),a._v(" "),t("p",[t("strong",[a._v("-XX:ParallelGCThreads")]),a._v("：STW阶段使用线程数，默认是总核数的60%。")]),a._v(" "),t("p",[t("strong",[a._v("-XX:ZCollectionInterval")]),a._v("：ZGC发生的最小时间间隔，单位秒。")]),a._v(" "),t("p",[t("strong",[a._v("-XX:ZAllocationSpikeTolerance")]),a._v("：ZGC触发自适应算法的修正系数，默认2，数值越大，越早的触发ZGC。")]),a._v(" "),t("p",[t("strong",[a._v("-XX:+UnlockDiagnosticVMOptions -XX:-ZProactive")]),a._v("：是否启用主动回收，默认开启，这里的配置表示关闭。")]),a._v(" "),t("p",[t("strong",[a._v("-Xlog")]),a._v("：设置GC日志中的内容、格式、位置以及每个日志的大小。")]),a._v(" "),t("p",[t("strong",[a._v("备注：")])]),a._v(" "),t("p",[a._v("1、目前ZGC只支持Linux的64位操作系统")]),a._v(" "),t("p",[a._v("2、JDK11位ZGC的最初版本，随着JDK的升级ZGC也不断在优化中")]),a._v(" "),t("p",[a._v("3、使用ZGC如果需要升级JDK版本，需要考虑整个系统的兼容性、功能、性能风险，不能盲目升级。")])])}),[],!1,null,null,null);v.default=_.exports}}]);