(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{424:function(t,s,a){"use strict";a.r(s);var n=a(19),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"java8函数式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java8函数式编程"}},[t._v("#")]),t._v(" JAVA8函数式编程")]),t._v(" "),a("p",[t._v("Java 是一门面向对象编程语言。面向对象编程语言和函数式编程语言中的基本元素（Basic Values）都可以动态封装程序行为：面向对象编程语言使用带有方法的对象封装行为，函数式编程语言使用函数封装行为。但这个相同点并不明显，因为Java 对象往往比较“重量级”：实例化一个类型往往会涉及不同的类，并需要初始化类里的字段和方法。")]),t._v(" "),a("h2",{attrs:{id:"简单模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单模型"}},[t._v("#")]),t._v(" 简单模型")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Artist 创作音乐的个人或团队。")]),t._v(" "),a("ul",[a("li",[t._v("name： 艺术家的名字（ 例如“ 甲壳虫乐队”）。")]),t._v(" "),a("li",[t._v("members： 乐队成员（ 例如“ 约翰 · 列侬”） 该字段可为空。")]),t._v(" "),a("li",[t._v("origin： 乐队来自哪里（ 例如“ 利物浦”）。")])])]),t._v(" "),a("li",[a("p",[t._v("Track专辑中的一支曲目。")]),t._v(" "),a("ul",[a("li",[t._v("name： 曲目名称（ 例如《 黄色潜水艇》）。")])])]),t._v(" "),a("li",[a("p",[t._v("Album  专辑， 由若干曲目组成。")]),t._v(" "),a("ul",[a("li",[t._v("name： 专辑名（ 例如《 左轮手枪》）。")]),t._v(" "),a("li",[t._v("tracks： 专辑上所有曲目的列表。")]),t._v(" "),a("li",[t._v("musicians： 参与创作本专辑的艺术家列表")])])]),t._v(" "),a("li",[a("p",[a("strong",[a("code",[t._v("collect(toList())")]),t._v(" 由 Stream 里的值生成一个列表， 是一个及早求值操作。")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("**map(Function<? super T, ? extends R> mapper)")]),t._v(" 可以将一种类型的值转换成另外一种类型**")])])]),t._v(" "),a("div",{staticClass:"center-container"},[a("p",[a("img",{attrs:{src:"/img/4/Untitled.png",alt:""}})])]),a("ul",[a("li",[a("code",[t._v("**filter(Predicate<? super T> predicate)")]),t._v("遍历数据并检查其中的元素**")])]),t._v(" "),a("div",{staticClass:"center-container"},[a("p",[a("img",{attrs:{src:"/img/4/Untitled1.png",alt:""}})])]),a("ul",[a("li",[a("code",[t._v("**flatMap(Function<? super T, ? extends Stream<? extends R>> mapper)")]),t._v("flatMap 方法可用 Stream 替换值， 然后将多个 Stream 连接成一个 Stream**")])]),t._v(" "),a("div",{staticClass:"center-container"},[a("p",[a("img",{attrs:{src:"/img/4/Untitled2.png",alt:""}})])]),a("ul",[a("li",[a("code",[t._v("**max(Comparator<? super T> comparator) 和 min(Comparator<? super T> comparator)")]),t._v(" 求最大值和最小值。**")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Track")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" tracks "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Track")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bakai"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("524")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Track")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Violets for Your Furs"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("378")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Track")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Time Was"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("451")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Track")]),t._v(" shortestTrack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tracks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("comparing")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("track "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" track"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("ul",[a("li",[a("code",[t._v("**reduce()")]),t._v(" 实现从一组值中生成一个值。**")])]),t._v(" "),a("div",{staticClass:"center-container"},[a("p",[a("img",{attrs:{src:"/img/4/Untitled3.png",alt:""}})])]),a("ul",[a("li",[t._v("**Optional是为核心类库新设计的一个数据类型， 用来替换 null 值。**使用 Optional 对象有两个目的： 首先， Optional 对象鼓励程序员适时检查变量是否为空， 以避免代码缺陷； 其次， 它将一个类的 API 中可能为空的值文档化， 这比阅读实现代码要简单很多。Optional 对象相当于值的容器， 而该值可以通过 get 方法提取。")]),t._v(" "),a("li",[t._v("方法引用**"),a("code",[t._v("标准语法为 Classname::methodName。")]),t._v("**")]),t._v(" "),a("li",[a("code",[t._v("**partitioningBy**")]),t._v("接受一个流， 并将其分成两部分。它使用 Predicate 对象判断一个元素应该属于哪个部分， 并根据布尔值返回一个 Map 到列表。")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Artist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bandsAndSoloRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stream")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Artist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" artists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" artists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("collect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("partitioningBy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Artist")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSolo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("div",{staticClass:"center-container"},[a("p",[a("img",{attrs:{src:"/img/4/Untitled4.png",alt:""}})])]),a("ul",[a("li",[a("code",[t._v("**groupingBy**")]),t._v(" 收集器（ 如图5-2 所示） 接受一个分类函数， 用来对数据分组， 就像 partitioningBy 一样， 接受一个Predicate 对象将数据分成 ture 和 false 两部分。")])]),t._v(" "),a("div",{staticClass:"center-container"},[a("p",[a("img",{attrs:{src:"/img/4/Untitled5.png",alt:""}})])])])}),[],!1,null,null,null);s.default=e.exports}}]);