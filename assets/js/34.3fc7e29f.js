(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{444:function(v,t,_){"use strict";_.r(t);var a=_(20),r=Object(a.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("垃圾回收算法涉及大量的细节且各平台实现机制不同，本文只是简单介绍算法的思想。")]),v._v(" "),_("h2",{attrs:{id:"标记-清除（mark-sweep）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标记-清除（mark-sweep）"}},[v._v("#")]),v._v(" 标记-清除（Mark-Sweep）")]),v._v(" "),_("p",[_("strong",[v._v("标记—清除算法是最基础的收集算法")]),v._v("，它分为“"),_("strong",[v._v("标记")]),v._v("”和“"),_("strong",[v._v("清除")]),v._v("”两个阶段：首先标记出所需回收的对象，在标记完成后统一回收掉所有被标记的对象，"),_("strong",[v._v("标记过程即为可达性分析算法中判定垃圾对象的标记过程")]),v._v("。标记-清除算法执行过程：")]),v._v(" "),_("p",[_("img",{staticClass:"lazy",attrs:{alt:"image-20200910215618978","data-src":"https://i.loli.net/2020/09/10/HKyoiLqGIuv1E87.png",loading:"lazy"}})]),v._v(" "),_("p",[v._v("该算法有如下缺点：")]),v._v(" "),_("ul",[_("li",[v._v("标记和清除过程的"),_("strong",[v._v("效率都不高")])]),v._v(" "),_("li",[v._v("标记清除后会产生大量不连续的"),_("strong",[v._v("内存碎片")]),v._v("，空间碎片太多可能会导致，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不触发另一次垃圾收集动作")])]),v._v(" "),_("h2",{attrs:{id:"复制（copying）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#复制（copying）"}},[v._v("#")]),v._v(" 复制（Copying）")]),v._v(" "),_("p",[v._v("复制算法是针对标记—清除算法的缺点，在其基础上进行改进而得到的，它将可用内存按容量分为大小相等的两块，每次只使用其中的一块，"),_("strong",[v._v("当这一块的内存用完了，就将还存活着的对象复制到另外一块内存上面，然后再把已使用过的内存空间一次清理掉")]),v._v("。复制算法有如下优点：")]),v._v(" "),_("ul",[_("li",[v._v("每次只对一块内存进行回收，运行高效；")]),v._v(" "),_("li",[v._v("只需移动栈顶指针，按顺序分配内存即可，实现简单；")]),v._v(" "),_("li",[v._v("内存回收时不用考虑内存碎片的出现；")])]),v._v(" "),_("p",[v._v("它的缺点是：可一次性分配的"),_("strong",[v._v("最大内存缩小了一半")]),v._v("。 复制算法执行过程：")]),v._v(" "),_("p",[_("img",{staticClass:"lazy",attrs:{alt:"image-20200910220002354","data-src":"https://i.loli.net/2020/09/10/zZqAPO3fQgwRVYy.png",loading:"lazy"}})]),v._v(" "),_("p",[v._v("现在的商业虚拟机都采用这种收集算法来回收新生代，新生代中的对象98%都是“朝生夕死”的，所以并不需要按照1:1的比例来划分内存空间，而是将内存分为"),_("strong",[v._v("一块比较大的Eden空间和两块较小的Survivor空间")]),v._v("，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是"),_("strong",[v._v("8:1")]),v._v("，也就是说，每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的空间会被浪费。")]),v._v(" "),_("p",[v._v("当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证每次回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖于"),_("strong",[v._v("老年代")]),v._v("进行"),_("strong",[v._v("分配担保")]),v._v("，所以大对象直接进入老年代。")]),v._v(" "),_("h2",{attrs:{id:"标记-整理（mark-compact）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标记-整理（mark-compact）"}},[v._v("#")]),v._v(" 标记-整理（Mark-Compact）")]),v._v(" "),_("p",[v._v("复制算法比较适合于新生代，在老年代中，对象存活率比较高，如果执行较多的复制操作，效率将会变低，所以老年代一般会选用其他算法，如标记—整理算法。该算法标记的过程与标记—清除算法中的标记过程一样，但对标记后出的垃圾对象的处理情况有所不同，它不是直接对可回收对象进行清理，"),_("strong",[v._v("而是让所有的对象都向一端移动，然后直接清理掉端边界以外的内存")]),v._v("。标记—整理算法的回收情况如下所示：")]),v._v(" "),_("p",[_("img",{staticClass:"lazy",attrs:{alt:"image-20200910220216859","data-src":"https://i.loli.net/2020/09/10/hHkUx9vSLNwf8Wg.png",loading:"lazy"}})]),v._v(" "),_("h2",{attrs:{id:"分代收集（generational-collection）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分代收集（generational-collection）"}},[v._v("#")]),v._v(" 分代收集（Generational Collection）")]),v._v(" "),_("p",[v._v("当前商业虚拟机的垃圾收集都采用分代收集，它"),_("strong",[v._v("根据对象的存活周期的不同将内存划分为几块")]),v._v("，一般是把Java堆分为"),_("strong",[v._v("新生代")]),v._v("和"),_("strong",[v._v("老年代")]),v._v("。")]),v._v(" "),_("ul",[_("li",[v._v("在新生代中，每次垃圾收集时都会发现有大量对象死去，只有少量存活，因此可选用"),_("strong",[v._v("复制算法")]),v._v("来完成收集")]),v._v(" "),_("li",[v._v("老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用"),_("strong",[v._v("标记—清除算法")]),v._v("或"),_("strong",[v._v("标记—整理算法")]),v._v("来进行回收")])]),v._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("GC算法")]),v._v(" "),_("th",[v._v("优点")]),v._v(" "),_("th",[v._v("缺点")]),v._v(" "),_("th",[v._v("存活对象移动")]),v._v(" "),_("th",[v._v("内存碎片")]),v._v(" "),_("th",[v._v("适用场景")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("引用计数")]),v._v(" "),_("td",[v._v("实现简单")]),v._v(" "),_("td",[v._v("不能处理循环引用")]),v._v(" "),_("td"),v._v(" "),_("td"),v._v(" "),_("td")]),v._v(" "),_("tr",[_("td",[v._v("标记清除")]),v._v(" "),_("td",[v._v("不需要额外空间")]),v._v(" "),_("td",[v._v("两次扫描，耗时严重")]),v._v(" "),_("td",[v._v("N")]),v._v(" "),_("td",[v._v("Y")]),v._v(" "),_("td",[v._v("老年代")])]),v._v(" "),_("tr",[_("td",[v._v("复制")]),v._v(" "),_("td",[v._v("没有标记和清除")]),v._v(" "),_("td",[v._v("需要额外空间")]),v._v(" "),_("td",[v._v("Y")]),v._v(" "),_("td",[v._v("N")]),v._v(" "),_("td",[v._v("新生代")])]),v._v(" "),_("tr",[_("td",[v._v("标记整理")]),v._v(" "),_("td",[v._v("没有内存碎片")]),v._v(" "),_("td",[v._v("需要移动对象的成本")]),v._v(" "),_("td",[v._v("Y")]),v._v(" "),_("td",[v._v("N")]),v._v(" "),_("td",[v._v("老年代")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("参考资料： 《深入了解Java虚拟机》")])])])}),[],!1,null,null,null);t.default=r.exports}}]);