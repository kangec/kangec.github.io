(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{448:function(s,t,a){"use strict";a.r(t);var e=a(19),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_14、select、poll和epoll的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14、select、poll和epoll的区别"}},[s._v("#")]),s._v(" 14、select、poll和epoll的区别")]),s._v(" "),a("p",[s._v("在linux 没有实现epoll事件驱动机制之前，我们一般选择用select或者poll等IO多路复用的方法来实现并发服务程序。在大数据、高并发、集群等一些名词唱得火热之年代，select和poll的用武之地越来越有限，风头已经被epoll占尽。")]),s._v(" "),a("p",[a("strong",[s._v("select****的缺点：")])]),s._v(" "),a("ol",[a("li",[a("p",[s._v("单个进程能够监视的文件描述符的数量存在最大限制，通常是1024，当然可以更改数量，但由于select采用轮询的方式扫描文件描述符，文件描述符数量越多，性能越差；")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//在linux内核头文件中，有这样的定义：")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[s._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" __FD_SETSIZE  1024")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("内核 / 用户空间内存拷贝问题，select需要复制大量的句柄数据结构，产生巨大的开销；")])]),s._v(" "),a("li",[a("p",[s._v("select返回的是含有整个句柄的数组，应用程序需要遍历整个数组才能发现哪些句柄发生了事件；")])]),s._v(" "),a("li",[a("p",[s._v("select的触发方式是水平触发，应用程序如果没有完成对一个已经就绪的文件描述符进行IO操作，那么之后每次select调用还是会将这些文件描述符通知进程。")])])]),s._v(" "),a("p",[s._v("相比select模型，poll使用链表保存文件描述符，因此没有了监视文件数量的限制，但其他三个缺点依然存在。")]),s._v(" "),a("p",[s._v("拿select模型为例，假设我们的服务器需要支持100万的并发连接，则在__FD_SETSIZE 为1024的情况下，则我们至少需要开辟1k个进程才能实现100万的并发连接。")]),s._v(" "),a("p",[s._v("除了进程间上下文切换的时间消耗外，从内核/用户空间大量的无脑内存拷贝、数组轮询等，是系统难以承受的。")]),s._v(" "),a("p",[s._v("因此，基于select模型的服务器程序，要达到10万级别的并发访问，是一个很难完成的任务。")]),s._v(" "),a("p",[a("strong",[s._v("epoll的实现机制与select/poll机制完全不同，上面所说的 select的缺点在epoll上不复存在。")])]),s._v(" "),a("p",[s._v("设想一下如下场景：")]),s._v(" "),a("p",[s._v("有100万个客户端同时与一个服务器进程保持着TCP连接。而每一时刻，通常只有几百上千个TCP连接是活跃的(事实上大部分场景都是这种情况)。如何实现这样的高并发？")]),s._v(" "),a("p",[s._v("在select/poll时代，服务器进程每次都把这100万个连接告诉操作系统(从用户态复制句柄数据结构到内核态)，让操作系统内核去查询这些套接字上是否有事件发生，轮询完后，再将句柄数据复制到用户态，让服务器应用程序轮询处理已发生的网络事件，这一过程资源消耗较大，因此，select/poll一般只能处理几千的并发连接。")]),s._v(" "),a("p",[s._v("epoll的设计和实现与select完全不同。")]),s._v(" "),a("p",[s._v("epoll通过在Linux内核中申请一个简易的文件系统(文件系统一般用什么数据结构实现？B+树)把原先的select/poll调用分成了3个部分：")]),s._v(" "),a("p",[s._v("​\t1）调用epoll_create()建立一个epoll对象(在epoll文件系统中为这个句柄对象分配资源)")]),s._v(" "),a("p",[s._v("​\t2）调用epoll_ctl向epoll对象中添加这100万个连接的套接字")]),s._v(" "),a("p",[s._v("​\t3）调用epoll_wait收集发生的事件的连接")]),s._v(" "),a("p",[s._v("如此一来，要实现上面说是的场景，只需要在进程启动时建立一个epoll对象，然后在需要的时候向这个epoll对象中添加或者删除连接。同时，epoll_wait的效率也非常高，因为调用epoll_wait时，并没有一股脑的向操作系统复制这100万个连接的句柄数据，内核也不需要去遍历全部的连接。")]),s._v(" "),a("p",[s._v("下面来看看Linux内核具体的epoll机制实现思路。")]),s._v(" "),a("p",[s._v("当某一进程调用epoll_create方法时，Linux内核会创建一个eventpoll结构体，这个结构体中有两个成员与epoll的使用方式密切相关。eventpoll结构体如下所示：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("eventpoll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  \n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("  \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*红黑树的根节点，这颗树中存储着所有添加到epoll中的需要监控的事件*/")]),s._v("  \n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("rb_root")]),s._v(" rbr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*双链表中则存放着将要通过epoll_wait返回给用户的满足条件的事件*/")]),s._v("  \n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("list_head")]),s._v(" rdlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("每一个epoll对象都有一个独立的eventpoll结构体，用于存放通过epoll_ctl方法向epoll对象中添加进来的事件。这些事件都会挂载在红黑树中，如此，重复添加的事件就可以通过红黑树而高效的识别出来(红黑树的插入时间效率是lgn，其中n为树的高度)。")]),s._v(" "),a("p",[s._v("而所有添加到epoll中的事件都会与设备(网卡)驱动程序建立回调关系，也就是说，当相应的事件发生时会调用这个回调方法。这个回调方法在内核中叫ep_poll_callback,它会将发生的事件添加到rdlist双链表中。")]),s._v(" "),a("p",[s._v("在epoll中，对于每一个事件，都会建立一个epitem结构体，如下所示：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("epitem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  \n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("rb_node")]),s._v(" rbn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//红黑树节点  ")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("list_head")]),s._v("  rdllink"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//双向链表节点   ")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("epoll_filefd")]),s._v(" ffd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//事件句柄信息  ")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("eventpoll")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//指向其所属的eventpoll对象  ")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("epoll_event")]),s._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//期待发生的事件类型")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("当调用epoll_wait检查是否有事件发生时，只需要检查eventpoll对象中的rdlist双链表中是否有epitem元素即可。如果rdlist不为空，则把发生的事件复制到用户态，同时将事件数量返回给用户。")]),s._v(" "),a("div",{staticClass:"center-container"},[a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/07/24/R9UAQpwS5ElCbiZ.png",alt:""}})])]),a("p",[a("strong",[s._v("epoll的用法")])]),s._v(" "),a("p",[s._v("第一步：epoll_create()系统调用。此调用返回一个句柄，之后所有的使用都依靠这个句柄来标识。")]),s._v(" "),a("p",[s._v("第二步：epoll_ctl()系统调用。通过此调用向epoll对象中添加、删除、修改感兴趣的事件，返回0标识成功，返回-1表示失败。")]),s._v(" "),a("p",[s._v("第三部：epoll_wait()系统调用。通过此调用收集收集在epoll监控中已经发生的事件。")]),s._v(" "),a("h2",{attrs:{id:"_15、网络编程中设计并发服务器，使用多进程-与-多线程-，请问有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15、网络编程中设计并发服务器，使用多进程-与-多线程-，请问有什么区别？"}},[s._v("#")]),s._v(" 15、网络编程中设计并发服务器，使用多进程 与 多线程 ，请问有什么区别？")]),s._v(" "),a("ol",[a("li",[s._v("进程：\n"),a("ol",[a("li",[s._v("子进程是父进程的复制品。")]),s._v(" "),a("li",[s._v("子进程获得父进程数据空间、堆和栈的复制品。")])])]),s._v(" "),a("li",[s._v("线程：")])]),s._v(" "),a("p",[s._v("相对与进程而言，线程是一个更加接近与执行体的概念，它可以与同进程的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列。\n两者都可以提高程序的并发度，提高程序运行效率和响应时间。 线程和进程在使用上各有优缺点：")]),s._v(" "),a("p",[s._v("线程执行开销小，但不利于资源管理和保护；而进程正相反。")]),s._v(" "),a("p",[s._v("同时，线程适合于在SMP机器上运行，而进程则可以跨机器迁移。")]),s._v(" "),a("p",[s._v('SMP的全称是"对称多处理"（Symmetrical Multi-Processing）技术，是指在一个计算机上汇集了一组处理器(多CPU),各CPU之间共享内存子系统以及总线结构。')]),s._v(" "),a("h2",{attrs:{id:"_16、网络编程的一般步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16、网络编程的一般步骤"}},[s._v("#")]),s._v(" 16、网络编程的一般步骤")]),s._v(" "),a("h3",{attrs:{id:"对于tcp连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对于tcp连接"}},[s._v("#")]),s._v(" 对于TCP连接")]),s._v(" "),a("p",[a("strong",[s._v("1.服务器端")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）创建套接字create；\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）绑定端口号bind；\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("）监听连接listen；\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("）接受连接请求accept，并返回新的套接字；\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("）用新返回的套接字recv"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("send；\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("）关闭套接字。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("strong",[s._v("2.客户端")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）创建套接字create"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）发起建立连接请求connect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("）发送"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("接收数据send"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("recv；\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("）关闭套接字。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("TCP总结：")])]),s._v(" "),a("p",[s._v("​\t"),a("strong",[s._v("Server端：create – bind – listen–  accept–  recv/send– close")])]),s._v(" "),a("p",[s._v("​\t"),a("strong",[s._v("Client端：create——- conncet——send/recv——close.")])]),s._v(" "),a("h3",{attrs:{id:"对于udp连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对于udp连接"}},[s._v("#")]),s._v(" 对于UDP连接")]),s._v(" "),a("p",[a("strong",[s._v("1.服务器端:")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）创建套接字create；\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）绑定端口号bind；\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("）接收"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("发送消息recvfrom"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("sendto；\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("）关闭套接字。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("2.客户端:")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）创建套接字create；\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）发送"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("接收消息sendto"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("recvfrom；\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("）关闭套接字"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("UDP总结:")])]),s._v(" "),a("p",[s._v("​\t"),a("strong",[s._v("Server端：create—-bind —-recvfrom/sendto—-close")])]),s._v(" "),a("p",[s._v("​\t"),a("strong",[s._v("Client端：create—-  sendto/recvfrom—-close.")])]),s._v(" "),a("p",[s._v("*"),a("em",[s._v("函数原型int recv( "),a("em",[s._v("In")]),s._v(" SOCKET s, "),a("em",[s._v("Out")]),s._v(" char "),a("em",[s._v("buf, "),a("em",[s._v("In")]),s._v(" int len, "),a("em",[s._v("In")]),s._v(" int flags);")])])]),s._v(" "),a("h2",{attrs:{id:"_17、tcp为什么不是两次连接？而是三次握手？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17、tcp为什么不是两次连接？而是三次握手？"}},[s._v("#")]),s._v(" 17、TCP为什么不是两次连接？而是三次握手？")]),s._v(" "),a("p",[s._v("如果A与B两个进程通信，如果仅是两次连接。"),a("strong",[s._v("可能出现的一种情况")]),s._v("就是：")]),s._v(" "),a("p",[s._v("A发送完请求报文以后，由于网络情况不好，出现了网络拥塞，即B延时很长时间后收到报文，即此时A将此报文认定为失效的报文。")]),s._v(" "),a("p",[s._v("B收到报文后，会向A发起连接。此时两次握手完毕")]),s._v(" "),a("p",[s._v("B会认为已经建立了连接可以通信，B会一直等到A发送的连接请求")]),s._v(" "),a("p",[s._v("而A对失效的报文回复自然不会处理。")]),s._v(" "),a("p",[s._v("因此会陷入B忙等的僵局，造成资源的浪费。")])])}),[],!1,null,null,null);t.default=n.exports}}]);