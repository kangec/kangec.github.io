(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{448:function(t,a,n){"use strict";n.r(a);var e=n(19),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"_10、nio-buffer-的内部结构是什么？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10、nio-buffer-的内部结构是什么？"}},[t._v("#")]),t._v(" 10、Nio buffer 的内部结构是什么？")]),t._v(" "),n("p",[t._v("一个 buffer 主要由 position,limit,capacity 三个变量来控制读写的过程。此三个变量的含义见如下表格：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("参数")]),t._v(" "),n("th",[t._v("写模式")]),t._v(" "),n("th",[t._v("读模式")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("position")]),t._v(" "),n("td",[t._v("当前写入的单位数据数量")]),t._v(" "),n("td",[t._v("当前读取的单位数据位置")])]),t._v(" "),n("tr",[n("td",[t._v("limit")]),t._v(" "),n("td",[t._v("代表最多能写多少单位数据和容量是一样的")]),t._v(" "),n("td",[t._v("代表最多能读多少单位数据，和之前写入的单位数据量一致")])]),t._v(" "),n("tr",[n("td",[t._v("capacity")]),t._v(" "),n("td",[t._v("buffer 容量")]),t._v(" "),n("td",[t._v("buffer 容量")])])])]),t._v(" "),n("p",[n("strong",[t._v("Buffer 常见方法：")])]),t._v(" "),n("ol",[n("li",[t._v("flip(): 写模式转换成读模式")]),t._v(" "),n("li",[t._v("rewind() ：将 position 重置为 0 ，一般用于重复读。")]),t._v(" "),n("li",[t._v("clear() ：清空 buffer ，准备再次被写入 (position 变成 0 ， limit 变成 capacity) 。")]),t._v(" "),n("li",[t._v("compact(): 将未读取的数据拷贝到 buffer 的头部位。")]),t._v(" "),n("li",[t._v("mark() 、 reset():mark 可以标记一个位置， reset 可以重置到该位置。")])]),t._v(" "),n("p",[n("strong",[t._v("Buffer 常见类型：")]),t._v(" ByteBuffer 、 MappedByteBuffer 、 CharBuffer 、 DoubleBuffer 、 FloatBuffer 、 IntBuffer 、LongBuffer 、 ShortBuffer 。")]),t._v(" "),n("p",[t._v("**channel 常见类型 😗*FileChannel 、 DatagramChannel(UDP) 、 SocketChannel(TCP) 、 ServerSocketChannel(TCP)")]),t._v(" "),n("h2",{attrs:{id:"_11、java-nio-中的-channel是什么？有什么特点？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11、java-nio-中的-channel是什么？有什么特点？"}},[t._v("#")]),t._v(" 11、Java NIO 中的 Channel是什么？有什么特点？")]),t._v(" "),n("p",[t._v("Channel：Java NIO中的SocketChannel是一个连接到TCP网络套接字的通道。可以通过以下2种方式创建SocketChannel：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("打开一个SocketChannel并连接到互联网上的某台服务器。")])]),t._v(" "),n("li",[n("p",[t._v("一个新连接到达ServerSocketChannel时，会创建一个SocketChannel。")])]),t._v(" "),n("li",[n("p",[t._v("打开 SocketChannel  下面是SocketChannel的打开方式：")]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SocketChannel")]),t._v(" socketChannel "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SocketChannel")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nsocketChannel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InetSocketAddress")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://jenkov.com"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])])]),t._v(" "),n("li",[n("p",[t._v("关闭 SocketChannel")])]),t._v(" "),n("li",[n("p",[t._v("当用完SocketChannel之后调用SocketChannel.close()关闭SocketChannel：  "),n("code",[t._v("socketChannel.close();")])])]),t._v(" "),n("li",[n("p",[t._v("从 SocketChannel 读取数据 :要从SocketChannel中读取数据，调用一个read()的方法之一。\n"),n("code",[t._v("ByteBuffer buf = ByteBuffer.allocate(48);")]),t._v(" "),n("code",[t._v("int bytesRead = socketChannel.read(buf);")])])]),t._v(" "),n("li",[n("p",[t._v("非阻塞模式:可以设置 SocketChannel 为非阻塞模式（non-blocking mode）.设置之后，就可以在异步模式下调用connect(), read() 和write()了。\n如果SocketChannel在非阻塞模式下，此时调用connect()，该方法可能在连接建立之前就返回了。为了确定连接是否建立，可以调用finishConnect()的方法。像这样：")])])]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("socketChannel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("configureBlocking")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsocketChannel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InetSocketAddress")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://jenkov.com"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" socketChannel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("finishConnect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//wait, or do something else...")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[n("strong",[t._v("Java NIO Channel通道和流非常相似，主要有以下几点区别：")])]),t._v(" "),n("ul",[n("li",[t._v("通道可以读也可以写，流一般来说是单向的（只能读或者写，所以之前我们用流进行IO操作的时候需要分别创建一个输入流和一个输出流）。")]),t._v(" "),n("li",[t._v("通道可以异步读写。")]),t._v(" "),n("li",[t._v("通道总是基于缓冲区Buffer来读写。")])]),t._v(" "),n("p",[n("strong",[t._v("Java NIO中最重要的几个Channel的实现：")])]),t._v(" "),n("ul",[n("li",[t._v("FileChannel： 用于文件的数据读写")]),t._v(" "),n("li",[t._v("DatagramChannel： 用于UDP的数据读写")]),t._v(" "),n("li",[t._v("SocketChannel： 用于TCP的数据读写，一般是客户端实现")]),t._v(" "),n("li",[t._v("ServerSocketChannel: 允许我们监听TCP链接请求，每个请求会创建会一个SocketChannel，一般是服务器实现")])]),t._v(" "),n("p",[n("strong",[t._v("类层次结构")])]),t._v(" "),n("div",{staticClass:"center-container"},[n("p",[n("img",{attrs:{src:"https://i.loli.net/2020/07/24/1XsJLVFK9iuAmtS.png",alt:""}})])]),n("h2",{attrs:{id:"_12、java-nio中的selector是什么？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12、java-nio中的selector是什么？"}},[t._v("#")]),t._v(" 12、Java NIO中的Selector是什么？")]),t._v(" "),n("p",[n("strong",[t._v("Selector（选择器）：")])]),t._v(" "),n("p",[t._v("Selector 一般称 为选择器 ，当然你也可以翻译为 多路复用器 。它是Java NIO核心组件中的一个，用于检查一个或多个NIO Channel（通道）的状态是否处于可读、可写。如此可以实现单线程管理多个channels,也就是可以管理多个网络链接。使用Selector的好处在于： 使用更少的线程来就可以来处理通道了， 相比使用多个线程，避免了线程上下文切换带来的开销")]),t._v(" "),n("p",[n("strong",[t._v("Selector的创建")])]),t._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Selector")]),t._v(" selector "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Selector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注册Channel到Selector(Channel必须是非阻塞的)")]),t._v("\nchannel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("configureBlocking")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SelectionKey")]),t._v(" key "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" channel"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("register")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("selector"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Selectionkey")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OP_READ"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[n("strong",[t._v("SelectionKey介绍")])]),t._v(" "),n("p",[t._v("一个SelectionKey键表示了一个特定的通道对象和一个特定的选择器对象之间的注册关系。从Selector中选择channel(Selecting Channels via a Selector)\n选择器维护注册过的通道的集合，并且这种注册关系都被封装在SelectionKey当中.")]),t._v(" "),n("p",[n("strong",[t._v("停止选择的方法")])]),t._v(" "),n("p",[t._v("wakeup()方法 和close()方法。")]),t._v(" "),n("h2",{attrs:{id:"_13、简单讲一下文件io中的path和files"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13、简单讲一下文件io中的path和files"}},[t._v("#")]),t._v(" 13、简单讲一下文件IO中的Path和Files")]),t._v(" "),n("p",[n("strong",[t._v("文件I/O基石：Path：")])]),t._v(" "),n("p",[t._v("创建一个Path")]),t._v(" "),n("p",[t._v("File和Path之间的转换，File和URI之间的转换")]),t._v(" "),n("p",[t._v("获取Path的相关信息")]),t._v(" "),n("p",[t._v("移除Path中的冗余项")]),t._v(" "),n("p",[n("strong",[t._v("Files类：")])]),t._v(" "),n("p",[t._v("Files.exists() 检测文件路径是否存在")]),t._v(" "),n("p",[t._v("Files.createFile() 创建文件")]),t._v(" "),n("p",[t._v("Files.createDirectories()和Files.createDirectory()创建文件夹")]),t._v(" "),n("p",[t._v("Files.delete()方法 可以删除一个文件或目录")]),t._v(" "),n("p",[t._v("Files.copy()方法可以吧一个文件从一个地址复制到另一个位置")]),t._v(" "),n("p",[t._v("获取文件属性")]),t._v(" "),n("p",[t._v("遍历一个文件夹")]),t._v(" "),n("p",[t._v("Files.walkFileTree()遍历整个目录")])])}),[],!1,null,null,null);a.default=s.exports}}]);