(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{443:function(t,s,a){"use strict";a.r(s);var e=a(19),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("在网络应用中需要实现某种编解码器，将原始字节数据与自定义的消息对象进行互相转换。网络中都是以字节码的数据形式来传输数据的，服务器编码数据后发送到客户端，客户端需要对数据进行解码。")]),t._v(" "),a("p",[t._v("Netty提供了强大的编解码器框架，使得我们编写自定义的编解码器很容易，也容易封装重用。对于Netty而言，编解码器由两部分组成：编码器、解码器。")]),t._v(" "),a("ol",[a("li",[t._v("解码器：负责将消息从字节或其他序列形式转成指定的消息对象。")]),t._v(" "),a("li",[t._v("编码器：将消息对象转成字节或其他序列形式在网络上传输。")])]),t._v(" "),a("p",[t._v("Netty 的编（解）码器实现了 ChannelHandlerAdapter，也是一种特殊的 ChannelHandler，所以依赖于 ChannelPipeline，可以将多个编（解）码器链接在一起，以实现复杂的转换逻辑。")]),t._v(" "),a("p",[t._v('Netty里面的编解码：\n解码器：负责处理"入站 InboundHandler数据"\n编码器：负责"出站 OutboundHandler数据"。')]),t._v(" "),a("h2",{attrs:{id:"protobuf编解码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protobuf编解码"}},[t._v("#")]),t._v(" Protobuf编解码")]),t._v(" "),a("p",[t._v("Protobuf 是 Google 发布的开源项目，全称 Google Protocol Buffers，是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC[远程过程调用  remote procedure call ] 数据交换格式。目前很多公司 http+json -> tcp+protobuf。")]),t._v(" "),a("p",[t._v("Protobuf 是以 message 的方式来管理数据的. 支持跨平台、跨语言，即[客户端和服务器端可以是不同的语言编写的] （支持目前绝大多数语言，例如 C++、C#、Java、python 等）")]),t._v(" "),a("p",[t._v("高性能，高可靠性。使用 protobuf 编译器能自动生成代码，Protobuf 是将类的定义使用.proto 文件进行描述。说明，在idea 中编写 .proto 文件时，会自动提示是否下载 .ptotot 编写插件. 可以让语法高亮。然后通过 protoc.exe 编译器根据.proto 自动生成.java 文件")]),t._v(" "),a("div",{staticClass:"center-container"},[a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/07/27/IcENFk7GSZoH9TR.png",alt:""}})])]),a("h3",{attrs:{id:"使用protobuf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用protobuf"}},[t._v("#")]),t._v(" 使用protobuf")]),t._v(" "),a("p",[t._v("主要步骤：")]),t._v(" "),a("ol",[a("li",[t._v("在 .proto 文件中定义消息格式")]),t._v(" "),a("li",[t._v("使用 protobuf 编译器编译 .proto文件 成 Java 类")]),t._v(" "),a("li",[t._v("使用 Java 对应的 protobuf API来写或读消息")])]),t._v(" "),a("p",[a("strong",[t._v("定义.proto 文件")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//protobuf语法有 proto2和proto3两种，这里指定 proto3")]),t._v("\nsyntax "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"proto3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 文件选项")]),t._v("\noption java_package "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"com.server.protocol.protobuf"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\noption java_outer_classname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MessageBase"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 消息模型定义")]),t._v("\nmessage "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Message")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    string requestId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommandType")]),t._v(" cmd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    string content "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommandType")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        NORMAL "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//常规业务消息")]),t._v("\n        HEARTBEAT_REQUEST "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//客户端心跳消息")]),t._v("\n        HEARTBEAT_RESPONSE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//服务端心跳消息")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[a("strong",[t._v("构建实体类")])]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("protoc -I "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ./ --java_out"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("./ ./Message.proto\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("-I 选项用于指定待编译的 .proto消息定义文件所在的目录，该选项也可以写作为 --proto_path")]),t._v(" "),a("li",[t._v("--java_out选项表示生成 Java代码后存放位置，对于不同语言，我们的选项可能不同，比如生成C++代码为 --cpp_out")]),t._v(" "),a("li",[t._v("在前两个选项后再加上 待编译的消息定义文件")])]),t._v(" "),a("p",[a("strong",[t._v("使用实体类")])]),t._v(" "),a("p",[t._v("参考官方文档 : https://developers.google.com/protocol-buffers/docs/proto")]),t._v(" "),a("h3",{attrs:{id:"protobuf的编解码器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protobuf的编解码器"}},[t._v("#")]),t._v(" protobuf的编解码器")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("ProtobufDecoder")]),t._v(" "),a("td",[t._v("使用 protobuf 对消息进行解码")])]),t._v(" "),a("tr",[a("td",[t._v("ProtobufEncoder")]),t._v(" "),a("td",[t._v("使用 protobuf 对消息进行编码")])]),t._v(" "),a("tr",[a("td",[t._v("ProtobufVarint32FrameDecoder")]),t._v(" "),a("td",[t._v('根据消息中的 Google Protocol Buffers 的 “Base 128 Varint" 整型长度字段值动态地分割所接收到的 ByteBuf')])]),t._v(" "),a("tr",[a("td",[t._v("ProtobufVarint32LengthFieldPrepender")]),t._v(" "),a("td",[t._v('向 ByteBuf 前追加一个Google Protocol Buffers 的 “Base 128 Varint" 整型长度字段值')])])])]),t._v(" "),a("h3",{attrs:{id:"使用注意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用注意"}},[t._v("#")]),t._v(" 使用注意")]),t._v(" "),a("p",[t._v("ProtobufDecoder仅仅负责解码，它不支持读半包。因此，在 ProtobufDecoder 前面，一定要有能够处理读半包的解码器，有三种方式可以选择。使用Netty提供的 Protobufvarint32FrameDecoder，它可以处理半包消息：继承Netty提供的通用半包解码器 LengtFieldBasedFrameDecoder；继承 ByteToMessageDecoder 类，自己处理半包消息如果你只使用 ProtobufDecoder 解码器而忽略对半包消息的处理，程序是不能正常工作的。")])])}),[],!1,null,null,null);s.default=r.exports}}]);